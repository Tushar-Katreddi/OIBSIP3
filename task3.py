# -*- coding: utf-8 -*-
"""Task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cOeTbhnI1B0Rj3sFL4hixG6S1-cKQUwv

#  Car Price Prediction
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as pt
import seaborn as sb
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
from sklearn.linear_model import Lasso
from sklearn import metrics

#loading and displayiong of data set
data_car = pd.read_csv("car price.csv")

data_car

data_car.head(20)

data_car.tail(20)

"""# Information about dataset"""

data_car.info()

data_car.describe()

data_car.size

data_car.shape

data_car.isnull().sum

data_car.duplicated().sum()

data_car.columns

print(data_car.fueltype.value_counts())
print(data_car.aspiration.value_counts())
print(data_car.doornumber.value_counts())
print(data_car.carbody.value_counts())
print(data_car.drivewheel.value_counts())
print(data_car.enginelocation.value_counts())
print(data_car.fuelsystem.value_counts())

#relationship between Sybolling and price
pt.figure(figsize=(20,8))
pt.subplot(1,2,2)
pt.title('Symboling vs Price')
sb.boxplot(x=data_car.symboling, y=data_car.price, palette=("cubehelix"))
pt.show()

#relationship between Fuelsystem and price
pt.subplots(figsize=(40,30))
a=sb.boxplot(x='fuelsystem',y='price',data=data_car)
a.set_xticklabels(a.get_xticklabels(),rotation=90,ha='right')
pt.show()

#relationship between Engine and price
pt.subplots(figsize=(40,30))
a=sb.boxplot(x='enginetype',y='price',data=data_car)
a.set_xticklabels(a.get_xticklabels(),rotation=90,ha='right')
pt.show()

pt.figure(figsize=(20,8))
pt.subplot(1,2,1)
pt.title('Car Price Distribution Plot')
sb.distplot(data_car.price)
pt.show()

pt.figure(figsize=(20,8))
pt.subplot(1,2,2)
pt.title('Car Price Spread')
sb.boxplot(y=data_car.price)

#heatmap
pt.figure(figsize=(20,8))
corrrr=data_car.corr()
sb.heatmap(corrrr, xticklabels=corrrr.columns, yticklabels=corrrr.columns, annot=True)

"""# Training and Testing"""

data_car = pd.get_dummies(data_car, columns = ['fueltype','aspiration','doornumber','carbody','drivewheel','cylindernumber','enginelocation','enginetype', 'fuelsystem'])
print(data_car)

x_ = data_car.drop(['CarName','price'],axis=1)
y_ = data_car[['price']]

x_

y_

x_train,x_test,y_train,y_test = train_test_split(x_,y_,test_size=0.25,random_state=50)

x_train

y_train

"""# Linear Regression"""

model1 = LinearRegression()
model1.fit(x_train,y_train)

y_predt= model1.predict(x_test)

Mean_absolute_error = mean_absolute_error(y_test,y_predt)
print('Mean_absolute_error:',Mean_absolute_error)

Mean_squared_error = mean_squared_error(y_test,y_predt)
print('Mean_squared_error:',Mean_squared_error)

Root_Mean_squared_error = np.sqrt(Mean_squared_error)
print('Root_Mean_squared_error:',Root_Mean_squared_error)

R_Squared = r2_score(y_test,y_predt)
print('R-Squared:',R_Squared)

AdjRsquared = 1-((1-R_Squared)*(len(x_train)-1)/(len(x_train)))
print(AdjRsquared)

y_predt

y_test

y_test - y_predt